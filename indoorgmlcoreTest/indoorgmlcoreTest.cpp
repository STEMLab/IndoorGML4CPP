////////////////////////////////////////////////////////////////////////
//
// indoorgmlcoreTest.cpp
//
// This file was generated by XMLSpy 2021r2sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "../indoorgmlcore/indoorgmlcore.h"
#include <iostream>
#include <string>
using namespace std;
using namespace indoorgmlcore;

#import "msxml6.dll" implementation_only no_auto_exclude


#ifdef _DEBUG

	#define new DEBUG_NEW

	#undef THIS_FILE
	static char THIS_FILE[] = __FILE__;
#endif


#ifndef __GNUC__
CWinApp theApp;
#endif

void Example()
{
	Cindoorgmlcore doc = Cindoorgmlcore::LoadFromFile(_T("sample-3D.gml"));

	// Get the first (and only) root element <IndoorFeatures>
	CIndoorFeaturesType indoorfeatures = doc.IndoorFeatures.first();

	CPrimalSpaceFeaturesType PSF = indoorfeatures.primalSpaceFeatures.first().PrimalSpaceFeatures.first();
	
	// iteration: for each <CellSpace>...
	for (Iterator<CCellSpaceMemberType> CSMT = PSF.cellSpaceMember.all(); CSMT; ++CSMT)
	{
		// output values of ISBN attribute and (first and only) title element
		tcout << "<core:CellSpace gml:id = \"" << tstring(CSMT->CellSpace.first().id) << "\">"<<std::endl;
		
		gml::CShellType CST = CSMT->CellSpace.first().cellSpaceGeometry.first().Geometry3D.first().Solid.first().exterior.first().Shell.first();

		for (Iterator<gml::CSurfacePropertyType> SFT = CST.surfaceMember.all(); SFT; ++SFT) {
			tcout << "\t<gml:Polygon gml:id = \" >" << tstring(SFT.Polygon.first().id) <<"\">" <<std::endl;
			

			for (Iterator<gml::CDirectPositionType> DPT = SFT.Polygon.first().exterior.first().LinearRing.first().pos.all(); DPT; ++DPT) {
				tcout << "\t\t<gml:pos>" << tstring(DPT) << "</gml:pos>" << std::endl;

			}
		}

	}
	////////////////////////////////////////////////////////////////////
	//
	// Example code to create and save an XML document:
	//   indoorgmlcore::Cindoorgmlcore doc = indoorgmlcore::Cindoorgmlcore::CreateDocument();
	//   // Append root element
	//   indoorgmlcore::xlink::CtitleEltType root = doc.title2.append();
	//   // Append root element with prefix
	//   // indoorgmlcore::xlink::CtitleEltType root = doc.title2.appendWithPrefix(_T("p"));
	//   // Declare all namespaces from schema on root element 
	//   indoorgmlcore::Cindoorgmlcore::DeclareAllNamespacesFromSchema(root);
	//   // Declare namespace on root element 
	//   root.DeclareNamespace(_T("ns1"), _T("http://NamespaceTest.com/ns1"));
	//   ...
	//   doc.SetSchemaLocation(_T("C:/Users/stem/Documents/indoorgmlcore.xsd")); // optional
	//   doc.SaveToFile(_T("indoorgmlcore1.xml"), true);
	//
	// Example code to load and save an XML document:
	//   indoorgmlcore::Cindoorgmlcore doc = indoorgmlcore::Cindoorgmlcore::LoadFromFile(_T("indoorgmlcore1.xml"));
	//   indoorgmlcore::xlink::CtitleEltType root = doc.title2.first();
	//   ...
	//   doc.SaveToFile(_T("indoorgmlcore1.xml"), true);
	//
	// You must release the document at the end (in both cases)
	//   doc.DestroyDocument();
	//
	////////////////////////////////////////////////////////////////////
}

#if defined( __GNUC__ )
int main(int argc, char* argv[])
#else
int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
#endif
{
	tcerr << _T("indoorgmlcore Test Application") << endl;

#ifndef __GNUC__	
if (!AfxWinInit(::GetModuleHandle(NULL), NULL, ::GetCommandLine(), 0))
	{
		cerr << "Fatal Error: MFC initialization failed" << endl;
		return 1;
	}
#endif
	try
	{
		CoInitialize(NULL);

		Example();

		CoUninitialize();

		tcerr << _T("OK") << endl;
		return 0;
	}
	catch (CXmlException& e)
	{
		tcerr << _T("Error: ") << e.GetInfo().c_str() << endl;
		return 1;
	}
	catch (_com_error& e)
	{
		tcerr << _T("COM-Error from ") << (TCHAR*)e.Source() << _T(":") << endl;
		tcerr << (TCHAR*)e.Description() << endl;
		return 1;
	}
	catch (altova::Exception& exception)
	{
		tcerr << "Exception: " << exception.message() << endl;
		return 1;
	}
	catch (altova::Error& exception)
	{
		tcerr << "Error: " << exception.message() << endl;
		return 1;
	}
	catch (std::exception& e)
	{
		cerr << "Exception: " << e.what() << endl;
		return 1;
	}
	catch (...)
	{
		tcerr << _T("Unknown error") << endl;
		return 1;
	}
}
